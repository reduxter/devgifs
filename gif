import openpyxl
import os
import re

def open_workbook(workbook_path):
    """
    Open an Excel workbook using openpyxl.
    """
    if os.path.exists(workbook_path):
        try:
            print(f"Opening workbook: {workbook_path}")
            wb = openpyxl.load_workbook(workbook_path, data_only=False)  # Load with formulas
            return wb
        except Exception as e:
            print(f"Error opening workbook {workbook_path}: {e}")
            return None
    else:
        print(f"Workbook not found: {workbook_path}")
        return None

def extract_formula(cell):
    """
    Extract the formula from an openpyxl cell object.
    """
    return cell.value if isinstance(cell.value, str) and cell.value.startswith('=') else None

def trace_formulas_in_range(workbook_path, sheet_name, cell_range):
    """
    Trace formulas for a given range of cells in an Excel workbook using openpyxl.
    """
    trace = []

    # Open the workbook
    wb = open_workbook(workbook_path)
    if not wb:
        return trace  # If workbook couldn't be opened, return empty trace

    # Get the sheet
    sheet = wb[sheet_name]

    # Loop through each cell in the range and trace its formula
    for row in sheet[cell_range]:
        for cell in row:
            cell_reference = f"{cell.column_letter}{cell.row}"  # Get cell address

            formula = extract_formula(cell)
            value = cell.value  # Openpyxl cannot evaluate formulas; this is either a value or the formula string

            trace.append({
                'workbook': workbook_path,
                'sheet': sheet_name,
                'cell': cell_reference,
                'formula': formula,
                'value': value if not formula else None
            })
    
    return trace

def parse_external_workbook_references(formula):
    """
    Extract external workbook references from a formula string.
    """
    external_workbooks = set()
    pattern = r"(\[.+?\])"  # Capture anything within brackets, like [Workbook.xlsx]
    matches = re.findall(pattern, formula)
    
    for match in matches:
        ext_workbook_name = match.strip('[]')
        external_workbooks.add(ext_workbook_name)
    
    return external_workbooks

def trace_all_formulas_with_references(workbook_path, sheet_name, cell_range):
    """
    Trace all formulas, including logging external references, across a range in a workbook.
    """
    # Start by extracting formulas in the main workbook
    trace = trace_formulas_in_range(workbook_path, sheet_name, cell_range)

    external_workbook_references = set()
    for step in trace:
        formula = step.get('formula')
        if formula:
            external_workbook_references.update(parse_external_workbook_references(formula))

    # Log external workbook references
    if external_workbook_references:
        print("External workbook references found:")
        for ext_ref in external_workbook_references:
            print(f"External workbook reference: {ext_ref}")

    # Print the formula trace
    for step in trace:
        print(f"Workbook: {step['workbook']}, Sheet: {step['sheet']}, "
              f"Cell: {step['cell']}, Formula: {step['formula']}, Value: {step['value']}")
    
    return trace

# Example usage:
workbook_path = r'\\network_drive\path\to\your\workbook.xlsx'
sheet_name = 'Sheet1'
cell_range = 'A1:B10'  # Range for testing

trace = trace_all_formulas_with_references(workbook_path, sheet_name, cell_range)

# Inspect the trace
for step in trace:
    print(step)
