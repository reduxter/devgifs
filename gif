import win32com.client
import re
import os
import time

def extract_references_from_formula(formula):
    """Extract both internal and external references from a formula."""
    # Matches references like '[workbook.xlsx]Sheet!A1' (external) or 'Sheet!A1' (internal)
    external_ref = re.findall(r"'\[(.*?)\](.*?)'!\$?([A-Z]+\$?\d+)", formula)
    internal_ref = re.findall(r"([A-Z]+[0-9]+)", formula)
    return external_ref or internal_ref

def trace_formula_path(excel_app, workbook, sheet_name, cell_address, path=None):
    """Recursively traces the formula path across multiple workbooks until a raw value is found."""
    if path is None:
        path = []

    # Get the sheet and cell in the current workbook
    sheet = workbook.Sheets(sheet_name)
    cell = sheet.Range(cell_address)
    formula = cell.Formula
    value = cell.Value

    # Log the current workbook, sheet, cell, formula, and value
    path.append((workbook.Name, sheet_name, cell_address, formula, value))

    # If the cell contains a formula, trace it further
    if formula and formula != cell_address:
        # Extract references (internal or external)
        references = extract_references_from_formula(formula)

        for ref in references:
            if isinstance(ref, tuple):  # External workbook reference
                workbook_file, ref_sheet_name, ref_cell = ref
                # Construct the full path from the formula reference (you may need to adjust the base path)
                workbook_path = os.path.join("L:\\Data\\Data2\\Act\\Q3", workbook_file)

                if os.path.exists(workbook_path):
                    external_workbook = open_workbook_with_retry(excel_app, workbook_path)
                    if external_workbook:
                        # Recursively trace the formula in the external workbook and ensure correct workbook/sheet context
                        trace_formula_path(excel_app, external_workbook, ref_sheet_name, ref_cell, path)
                    else:
                        path.append((workbook_file, ref_sheet_name, ref_cell, "Error: Could not open external workbook", None))
                else:
                    path.append((workbook_file, ref_sheet_name, ref_cell, "Error: Workbook not found", None))
            else:  # Internal reference within the same workbook
                trace_formula_path(excel_app, workbook, sheet_name, ref, path)

    return path

def open_workbook_with_retry(excel_app, workbook_path, retries=3, wait_time=20):
    """
    Attempts to open a workbook with retries. If it takes too long, waits and retries.
    - retries: The number of times to retry opening the workbook.
    - wait_time: The time (in seconds) to wait between retries.
    """
    attempt = 0
    workbook = None
    while attempt < retries:
        try:
            workbook = excel_app.Workbooks.Open(workbook_path)
            return workbook
        except Exception as e:
            print(f"Attempt {attempt + 1} - Error opening workbook {workbook_path}: {str(e)}")
            attempt += 1
            time.sleep(wait_time)
    
    print(f"Failed to open workbook {workbook_path} after {retries} attempts.")
    return None

def trace_workbook(excel_app, workbook_path, sheet_name, cell_range):
    """Traces all cells in the given range and outputs the nesting details."""
    workbook = open_workbook_with_retry(excel_app, workbook_path)
    if not workbook:
        print(f"Unable to open the workbook at {workbook_path}")
        return None

    nesting_details = {}

    # Process each cell in the specified range
    for row in workbook.Sheets(sheet_name).Range(cell_range):
        cell_address = row.Address.replace('$', '')  # Remove $ for absolute references
        nesting_details[cell_address] = trace_formula_path(excel_app, workbook, sheet_name, cell_address)

    workbook.Close(SaveChanges=False)  # Close the workbook after processing
    return nesting_details

# Example Usage
workbook_path = r"L:\Data\Data2\Act\Q1\example_workbook.xlsx"
sheet_name = "Sheet1"
cell_range = "H4:H4"  # Example range to process one cell

# Initialize Excel application
excel_app = win32com.client.Dispatch("Excel.Application")
excel_app.Visible = False  # Run Excel in the background

try:
    # Trace the workbook for the given cell range
    nesting_details = trace_workbook(excel_app, workbook_path, sheet_name, cell_range)

    # Output the details
    for cell, details in nesting_details.items():
        print(f"Nesting details for cell {cell}:")
        for detail in details:
            print(f"Workbook: {detail[0]}, Sheet: {detail[1]}, Cell: {detail[2]}, Formula: {detail[3]}, Value: {detail[4]}")
        print("\n")
finally:
    # Ensure Excel application is closed properly
    excel_app.Quit()
