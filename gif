import xlwings as xw
import os
import re
import time

def open_all_workbooks(workbook_paths, app):
    """
    Open all necessary workbooks and return a dictionary of workbook objects.
    """
    opened_workbooks = {}
    for path in workbook_paths:
        if os.path.exists(path):
            try:
                print(f"Opening workbook: {path}")
                wb = app.books.open(path)
                opened_workbooks[path] = wb
            except Exception as e:
                print(f"Error opening workbook {path}: {e}")
        else:
            print(f"Workbook not found: {path}")
    return opened_workbooks

def get_all_referenced_workbooks(workbook_path, app, sheet_name, cell_range):
    """
    Find all referenced external workbooks from a given range of cells.
    """
    referenced_workbooks = set()
    
    # Open the workbook
    try:
        wb = app.books.open(workbook_path)
        sheet = wb.sheets[sheet_name]
        for cell in sheet.range(cell_range):
            cell_reference = cell.get_address(False, False)
            formula = cell.formula
            if formula:
                workbooks_in_formula = parse_external_workbook_references(formula, workbook_path)
                referenced_workbooks.update(workbooks_in_formula)
        wb.close()
    except Exception as e:
        print(f"Error while fetching referenced workbooks from {workbook_path}: {e}")
    
    return referenced_workbooks

def parse_external_workbook_references(formula, current_workbook):
    """
    Extract external workbook references from a formula.
    """
    external_workbooks = set()
    pattern = r"(\[.+?\])"  # Capture anything within brackets, like [Workbook.xlsx]
    matches = re.findall(pattern, formula)
    
    for match in matches:
        ext_workbook_name = match.strip('[]')
        ext_workbook_path = os.path.join(os.path.dirname(current_workbook), ext_workbook_name)
        external_workbooks.add(ext_workbook_path)
    
    return external_workbooks

def trace_formulas_in_range(workbook_path, sheet_name, cell_range, app, opened_workbooks):
    """
    Traces formulas for a given range of cells in a workbook and returns the full trace.
    """
    trace = []
    
    # Open the main workbook
    wb = opened_workbooks[workbook_path]
    sheet = wb.sheets[sheet_name]

    # Loop through each cell in the range and trace its formula
    for cell in sheet.range(cell_range):
        cell_reference = cell.get_address(False, False)
        formula = cell.formula
        value = cell.value
        
        trace.append({
            'workbook': workbook_path,
            'sheet': sheet_name,
            'cell': cell_reference,
            'formula': formula if formula else None,
            'value': value if not formula else None
        })
        
        if formula:
            # Parse and trace the formula's references
            references = parse_formula_references(formula, workbook_path)
            for ref_workbook_path, ref_sheet_name, ref_cell in references:
                if ref_workbook_path in opened_workbooks:
                    trace.extend(trace_formulas_in_range(ref_workbook_path, ref_sheet_name, ref_cell, app, opened_workbooks))
    
    return trace

def parse_formula_references(formula, current_workbook):
    """
    Parses formulas to extract references to other cells, including cross-workbook references.
    """
    references = []
    pattern = r"(\[.+?\])?(\w+)!([A-Z]+\d+)"
    
    matches = re.findall(pattern, formula)
    for match in matches:
        ext_wb, sheet_name, cell_ref = match
        
        if ext_wb:
            ext_workbook_name = ext_wb.strip('[]')
            ext_workbook_path = os.path.join(os.path.dirname(current_workbook), ext_workbook_name)
        else:
            ext_workbook_path = current_workbook
        
        references.append((ext_workbook_path, sheet_name, cell_ref))
    
    return references

def close_all_workbooks(opened_workbooks):
    """
    Close all opened workbooks.
    """
    for path, wb in opened_workbooks.items():
        try:
            print(f"Closing workbook: {path}")
            wb.close()
        except Exception as e:
            print(f"Error closing workbook {path}: {e}")

def find_formula_trace_for_range(workbook_path, sheet_name, cell_range):
    """
    Main function to trace formulas for all cells in a given range, including handling cross-workbook references.
    """
    app = xw.App(visible=False)
    
    try:
        # Find all referenced external workbooks
        referenced_workbooks = get_all_referenced_workbooks(workbook_path, app, sheet_name, cell_range)
        
        # Add the main workbook to the list of workbooks to open
        referenced_workbooks.add(workbook_path)
        
        # Open all necessary workbooks
        opened_workbooks = open_all_workbooks(referenced_workbooks, app)
        
        # Trace the formulas
        trace = trace_formulas_in_range(workbook_path, sheet_name, cell_range, app, opened_workbooks)
        
        # Print the trace
        for step in trace:
            print(f"Workbook: {step['workbook']}, Sheet: {step['sheet']}, "
                  f"Cell: {step['cell']}, Formula: {step['formula']}, Value: {step['value']}")
        
        return trace
    except Exception as e:
        print(f"Error during formula tracing: {e}")
    finally:
        close_all_workbooks(opened_workbooks)
        app.quit()

# Example usage:
workbook_path = r'\\network_drive\path\to\your\workbook.xlsx'
sheet_name = 'Sheet1'
cell_range = 'A1:A5'  # Start with a small range for testing

trace = find_formula_trace_for_range(workbook_path, sheet_name, cell_range)

# You can print or inspect the full trace of the formula resolution
for step in trace:
    print(step)
